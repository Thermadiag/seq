cmake_minimum_required(VERSION 3.8)
#include(CTest) # We include CTest which is part of CMake


enable_testing()
# create the testing file and list of tests
create_test_sourcelist (Benchs
  seq_benchs.cpp
  bench_format.cpp
  bench_hash.cpp
  bench_concurrent_hash.cpp
  bench_map.cpp
  bench_sequence.cpp
  bench_text_stream.cpp
  bench_tiered_vector.cpp
  bench_tiny_string.cpp
  bench_boost_unordered_benchmarks.cpp
  )

# add the executable
add_executable (seq_benchs ${Benchs})

set_property(TARGET seq_benchs PROPERTY CXX_STANDARD 14)

# find boost for flat_set and concurrent_flat_map
find_package(Boost)
if(${Boost_FOUND})
	message(STATUS "Boost library found!")
	target_compile_definitions(seq_benchs PRIVATE -DBOOST_FOUND)
	if(${Boost_VERSION_STRING} VERSION_GREATER_EQUAL "1.83")
		message(STATUS "Boost library version high enough to test concurrent_flat_map!")
		target_compile_definitions(seq_benchs PRIVATE -DBOOST_CONCURRENT_MAP_FOUND)
		#target_compile_features(seq_benchs PRIVATE cxx_std_17)
		set_property(TARGET seq_benchs PROPERTY CXX_STANDARD 20)
	endif()
	target_include_directories(seq_benchs PRIVATE ${Boost_INCLUDE_DIRS})
endif()

# find TBB for concurrent_hash_map and concurrent_unordered_map
find_package(TBB COMPONENTS tbb)
if(${TBB_FOUND})
	message(STATUS "TBB library found! ${TBB_VERSION}")
	
	target_compile_definitions(seq_benchs PRIVATE -DTBB_FOUND)
	target_include_directories(seq_benchs PRIVATE ${TBB_INCLUDE_DIRS})
	target_link_libraries(seq_benchs PRIVATE TBB::tbb)
endif()

 

# Test boost::container::flat_set insert and erase performances (very slow)
if(TEST_BOOST_INSERT_ERASE)
	target_compile_definitions(seq_benchs PRIVATE -DTEST_BOOST_INSERT_ERASE)
endif()

# msvc warnings generated by seq_benchs.cpp
target_compile_definitions(seq_benchs PRIVATE -D_CRT_SECURE_NO_WARNINGS)

if (WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	# mingw
	target_link_options(seq_benchs PRIVATE -lKernel32 -lpsapi -lBcrypt -fopenmp)
elseif(UNIX AND (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU"))
    target_link_options(seq_benchs PRIVATE  -lpthread -fopenmp)
endif()



target_include_directories(seq_benchs PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(seq_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../..)


# remove the test driver source file
set (BenchsToRun ${Benchs})
remove (BenchsToRun seq_benchs.cpp)

# Add all the ADD_TEST for each test
foreach (bench ${BenchsToRun})
  get_filename_component (TName ${bench} NAME_WE)
  add_test (NAME ${TName} COMMAND seq_benchs ${TName})
endforeach ()

install (TARGETS seq_benchs RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )