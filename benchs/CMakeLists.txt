cmake_minimum_required(VERSION 3.8)
#include(CTest) # We include CTest which is part of CMake

project(seq_benchs)


enable_testing()
# create the testing file and list of tests
create_test_sourcelist (Benchs
  seq_benchs.cpp
  bench_format.cpp
  bench_hash.cpp
  bench_mem_pool.cpp
  bench_map.cpp
  bench_sequence.cpp
  bench_text_stream.cpp
  bench_tiered_vector.cpp
  bench_tiny_string.cpp
  )
  

# add the executable
add_executable (seq_benchs ${Benchs})
  

target_compile_features(seq_benchs PRIVATE cxx_std_11)

# Test boost::container::flat_set insert and erase performances (very slow)
if(TEST_BOOST_INSERT_ERASE)
	add_definitions(-DTEST_BOOST_INSERT_ERASE)
endif()

# msvc warnings generated by seq_benchs.cpp
add_definitions(-D_CRT_SECURE_NO_WARNINGS)


if(CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	if(CMAKE_BUILD_TYPE MATCHES Debug)
		target_compile_options(seq_benchs PRIVATE -march=native)
	else()
		target_compile_options(seq_benchs PRIVATE -O2 -DNDEBUG -march=native -fopenmp)
	endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
	if(CMAKE_BUILD_TYPE MATCHES Debug)
		target_compile_options(seq_benchs PRIVATE )
	else()
		target_compile_options(seq_benchs PRIVATE /O2 /DNDEBUG /openmp /arch:AVX2)
	endif()
endif()

if (WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	# mingw
	target_link_options(seq_benchs PRIVATE -lKernel32 -lpsapi -lBcrypt -fopenmp)
elseif(UNIX AND (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU"))
    target_link_options(seq_benchs PRIVATE  -lpthread -fopenmp)
endif()


 
add_definitions(-DSEQ_HEADER_ONLY)

target_include_directories(seq_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_include_directories(seq_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/..)
#target_include_directories(seq_benchs PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/mimalloc/include)


# remove the test driver source file
set (BenchsToRun ${Benchs})
remove (BenchsToRun seq_benchs.cpp)

# Add all the ADD_TEST for each test
foreach (bench ${BenchsToRun})
  get_filename_component (TName ${bench} NAME_WE)
  add_test (NAME ${TName} COMMAND seq_benchs ${TName})
endforeach ()

