cmake_minimum_required(VERSION 3.8)
#include(CTest) # We include CTest which is part of CMake

option(TEST_CVECTOR "Test cvector class" ON)


enable_testing()
# create the testing file and list of tests
create_test_sourcelist (Tests
  seq_tests.cpp
  test_any.cpp
  test_charconv.cpp
  test_format.cpp
  test_cvector.cpp
  test_devector.cpp
  test_flat_map.cpp
  test_ordered_map.cpp
  test_mem_pool.cpp
  test_radix_hash_map.cpp
  test_radix_tree.cpp
  test_sequence.cpp
  test_tiered_vector.cpp
  test_tiny_string.cpp
  test_all_maps.cpp
  test_concurrent_map.cpp
  )
  

# add the executable
add_executable (seq_tests ${Tests})
  

target_compile_features(seq_tests PRIVATE cxx_std_14)
set_property(TARGET seq_tests PROPERTY CXX_STANDARD 14)

if(TEST_CVECTOR)
	target_compile_definitions(seq_tests PRIVATE -DTEST_CVECTOR)
	if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
		if(ENABLE_AVX2)
			target_compile_options(seq_tests PRIVATE /arch:AVX2)
		endif()
	else()
		target_compile_options(seq_tests PRIVATE -march=native)
	endif()
endif()

# msvc warnings generated by seq_tests.cpp
target_compile_definitions(seq_tests PRIVATE -D_CRT_SECURE_NO_WARNINGS)

#set the most drastic flags    
if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    target_compile_options(seq_tests PRIVATE /bigobj /WX /W3 /UNDEBUG -D_SCL_SECURE_NO_WARNINGS)
	set_source_files_properties(seq_tests.cpp PROPERTIES COMPILE_OPTIONS /W0)
elseif(WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	target_compile_options(seq_tests PRIVATE -Wno-unused-template -Wno-missing-prototypes -Wno-documentation-unknown-command -Wno-sizeof-pointer-memaccess -Wno-format-nonliteral -Wno-microsoft-cast -Wno-reserved-id-macro -Wno-float-equal -Wno-extra-semi-stmt -Wno-exit-time-destructors -Wno-documentation -Wno-c++98-compat -Wno-c++98-compat-pedantic -Werror -Wall -Wextra -Wold-style-cast -march=native -UNDEBUG  )
	set_source_files_properties(seq_tests.cpp PROPERTIES COMPILE_OPTIONS -Wno-error)
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	target_compile_options(seq_tests PRIVATE -Wno-unused-template -Wno-missing-prototypes -Wno-documentation-unknown-command -Wno-sizeof-pointer-memaccess -Wno-format-nonliteral -Wno-reserved-id-macro -Wno-float-equal -Wno-error,-Wextra-semi-stmt -Wno-exit-time-destructors -Wno-documentation -Wno-c++98-compat -Wno-c++98-compat-pedantic -Werror -Wall -Wextra -Wold-style-cast -march=native -UNDEBUG  )
	set_source_files_properties(seq_tests.cpp PROPERTIES COMPILE_OPTIONS -Wno-error)
else()
    target_compile_options(seq_tests PRIVATE -Werror -Wall -Wextra -Wold-style-cast -march=native -UNDEBUG  )
	set_source_files_properties(seq_tests.cpp PROPERTIES COMPILE_OPTIONS -Wno-error)
endif()



if (WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	# mingw
	target_link_options(seq_tests PRIVATE -lKernel32 -lpsapi -lBcrypt)
elseif(UNIX AND (CMAKE_CXX_COMPILER_ID MATCHES "Clang" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU"))
    target_link_options(seq_tests PRIVATE  -lpthread )
endif()


target_include_directories(seq_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
target_include_directories(seq_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/..)
target_include_directories(seq_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../..)
#target_include_directories(seq_tests PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/mimalloc/include)


# remove the test driver source file
set (TestsToRun ${Tests})
remove (TestsToRun seq_tests.cpp)

# Add all the ADD_TEST for each test
foreach (test ${TestsToRun})
  get_filename_component (TName ${test} NAME_WE)
  add_test (NAME ${TName} COMMAND seq_tests ${TName})
endforeach ()

install (TARGETS seq_tests RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} )